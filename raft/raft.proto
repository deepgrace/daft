//
// Copyright (c) 2023-present DeepGrace (complex dot invoke at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/deepgrace/draft
//

syntax = "proto3";

package draft;

message vote_req
{
    optional uint64 term = 1;
    optional string candidate_id = 2;
    optional uint64 last_log_index = 3;
    optional uint64 last_log_term = 4;
    optional bool early = 5;
}

message vote_res
{
    optional uint64 term = 1;
    optional bool vote_granted = 2;
}

message LogEntry
{
    optional uint64 term = 1;
    optional uint64 index = 2;
    optional string data = 3;
    optional bool config = 4;
}

message append_entries_req
{
    optional uint64 term = 1;
    optional string leader_id = 2;
    optional uint64 prev_log_index = 3;
    optional uint64 prev_log_term = 4;
    repeated LogEntry entries = 5;
    optional uint64 leader_commit = 6;
    optional uint64 id = 7;
}

message append_entries_res
{
    optional uint64 term = 1;
    optional bool success = 2;
    optional uint64 match_index = 3;
    optional uint64 id = 4;
}

message data_req
{
    optional uint64 term = 1;
    optional string leader_id = 2;
    optional uint64 last_index = 3;
    optional uint64 last_term = 4;
    optional string last_config = 5;
    optional string name = 6;
    optional bytes data = 7;
    optional uint32 perms = 8;
    optional uint64 id = 9;
}

message data_res
{
    optional uint64 term = 1;
    optional bool success = 2;
    optional uint64 id = 3;
}

message done_req
{
    optional uint64 term = 1;
    optional string leader_id = 2;
    optional string name = 3;
    optional uint64 id = 4;
}

service rpc_service
{
    rpc timeout_now(vote_req) returns (vote_res);
    rpc pre_vote(vote_req) returns (vote_res);

    rpc request_vote(vote_req) returns (vote_res);
    rpc append_entries(append_entries_req) returns (append_entries_res);

    rpc data_transfer(data_req) returns (data_res);
    rpc done_transfer(done_req) returns (data_res);
}

option cc_generic_services = true;
